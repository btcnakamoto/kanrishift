<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <title>CD出勤管理表 - v0.1</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
  <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
  <script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/ja.js"></script>
  <style>
    .holiday { background-color: #fef2f2; }
    .scroll-table {
      overflow-x: auto;
      white-space: nowrap;
      border-radius: 0.5rem;
      background-color: white;
      border: 1px solid #e5e7eb;
    }
    table th, table td { white-space: nowrap; }
    tr:nth-child(even) { background-color: #f9fafb; }
    .time-input {
      border: 1px solid #e5e7eb;
      border-radius: 0.25rem;
      padding: 0.25rem 0.5rem;
      font-size: 0.875rem;
      width: 120px;
      transition: all 0.2s;
    }
    .time-input:focus {
      outline: none;
      border-color: #93c5fd;
      box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
    }
    .time-input:read-only {
      background-color: #f9fafb;
      cursor: not-allowed;
    }
    .time-input-error {
      border-color: #f87171;
      background-color: #fee2e2;
    }
    .edited {
      background-color: #f0f9ff;
      transition: background-color 1s;
    }
    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 1000;
    }
    .modal-content {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: white;
      padding: 2rem;
      border-radius: 0.5rem;
      min-width: 300px;
    }
    .work-type-cell {
      cursor: pointer;
      transition: all 0.2s;
    }
    .work-type-cell:hover {
      background-color: #f0f9ff;
    }
    .time-input-small {
      width: 80px;
      text-align: center;
    }
    .time-select {
      width: 120px;
      padding: 0.25rem;
      border: 1px solid #e5e7eb;
      border-radius: 0.25rem;
      font-size: 0.875rem;
    }
    .flatpickr-input {
      width: 120px !important;
    }
    .day-cell {
      cursor: pointer;
      transition: all 0.2s;
      min-width: 40px;
      min-height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .day-cell:hover {
      background-color: #f0f9ff;
    }
    .day-cell.rest {
      background-color: #fee2e2;
      color: #dc2626;
    }
  </style>
</head>
<body class="bg-gradient-to-br from-white to-blue-50 min-h-screen text-gray-800">
  <!-- Modal -->
  <div id="workTypeModal" class="modal">
    <div class="modal-content">
      <h3 class="text-lg font-semibold mb-4">働き方設定</h3>
      <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700 mb-2">働き方</label>
        <select id="workTypeSelect" class="w-full border rounded-md p-2" onchange="toggleTimeInput()">
          <option value="">選択してください</option>
          <option value="時短">時短</option>
          <option value="長休">長休</option>
        </select>
      </div>
      <div id="timeInputContainer" class="mb-4 hidden">
        <label class="block text-sm font-medium text-gray-700 mb-2">勤務時間</label>
        <div class="flex items-center gap-2">
          <input type="text" id="startTime" class="time-select" placeholder="開始時間">
          <span class="text-gray-500">～</span>
          <input type="text" id="endTime" class="time-select" placeholder="終了時間">
        </div>
      </div>
      <div class="flex justify-end gap-2">
        <button onclick="closeWorkTypeModal()" class="px-4 py-2 bg-gray-200 rounded-md hover:bg-gray-300">キャンセル</button>
        <button onclick="saveWorkType()" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">設定</button>
      </div>
    </div>
  </div>

  <div class="min-h-screen flex flex-col">
    <header class="bg-white shadow px-6 py-4 flex justify-between items-center border-b">
      <div class="flex items-center gap-2">
        <h1 class="text-2xl font-bold text-gray-800 tracking-tight">CD出勤管理</h1>
      </div>
      <div class="text-sm text-gray-500">バージョン v0.1</div>
    </header>

    <main class="flex-1 px-6 py-4">
      <div class="bg-gradient-to-br from-blue-50 to-white p-6 rounded-xl shadow-lg border border-blue-100 mb-6">
        <h2 class="text-lg font-semibold text-gray-700 mb-4">🔍 フィルター</h2>
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
          <div>
            <label class="block text-sm font-medium text-gray-700">月</label>
            <select id="filterMonth" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" onchange="updateEmployeeNames(); applyFilter();">
              <option value="2025-2">2025年3月</option>
              <option value="2025-3" selected>2025年4月</option>
              <option value="2025-4">2025年5月</option>
            </select>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700">グループ</label>
            <select id="filterGroup" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" onchange="updateEmployeeNames(); applyFilter();">
              <option value="">すべて</option>
              <option value="A">A</option>
              <option value="B">B</option>
              <option value="MGR">MGR</option>
            </select>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700">名前</label>
            <select id="filterName" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" onchange="applyFilter();">
              <option value="">すべて</option>
            </select>
          </div>
        </div>
      </div>

      <div class="scroll-table p-4 ring-1 ring-gray-200 shadow-sm bg-white rounded-xl">
        <table id="shiftTable" class="table-auto border-collapse text-center min-w-[1800px] w-full text-sm">
          <thead></thead>
          <tbody></tbody>
        </table>
      </div>
    </main>

    <section id="collabStatus" class="bg-white mx-6 mb-6 p-4 rounded-xl shadow text-sm text-gray-700 ring-1 ring-gray-100">
      <h3 class="font-semibold text-gray-700 mb-2">🧑‍💻 現在編集中のユーザー</h3>
      <ul class="list-disc list-inside" id="activeEditors">
        <li>山田太郎</li>
        <li>佐藤花子</li>
      </ul>
    </section>

    <section id="updateLog" class="bg-white mx-6 mb-6 p-4 rounded shadow text-sm text-gray-600">
      <h3 class="font-semibold text-gray-700 mb-2">🕓 最終更新者ログ</h3>
      <p>最終更新者: <span id="lastEditor" class="font-semibold text-blue-700">佐藤花子（仮ユーザー）</span></p>
      <p>更新日時: <span id="lastUpdated" class="text-gray-800">2025年3月1日 14時23分</span></p>
    </section>

    <footer class="bg-blue-50 text-center text-xs text-gray-600 py-4 border-t border-blue-100">
      © 2025 CD出勤管理システム - すべての権利を保有します
    </footer>
  </div>

  <script>
    let currentEditingCell = null;

    // Flatpickrの設定
    flatpickr.localize(flatpickr.l10ns.ja);
    const timeConfig = {
      enableTime: true,
      noCalendar: true,
      dateFormat: "H:i",
      time_24hr: true,
      minuteIncrement: 15
    };

    // 時間選択の初期化
    function initTimePickers() {
      flatpickr("#startTime", timeConfig);
      flatpickr("#endTime", timeConfig);
    }

    // ページ読み込み時に初期化
    document.addEventListener('DOMContentLoaded', initTimePickers);

    function openWorkTypeModal(cell) {
      currentEditingCell = cell;
      const modal = document.getElementById('workTypeModal');
      const select = document.getElementById('workTypeSelect');
      
      select.value = cell.textContent || '';
      if (cell.textContent === '時短') {
        const timeCell = cell.parentElement.querySelector('td:nth-child(4) input');
        const [start, end] = timeCell.value.split('～');
        
        document.getElementById('startTime').value = start;
        document.getElementById('endTime').value = end;
        document.getElementById('timeInputContainer').classList.remove('hidden');
      } else {
        document.getElementById('timeInputContainer').classList.add('hidden');
      }
      
      modal.style.display = 'block';
    }

    function closeWorkTypeModal() {
      document.getElementById('workTypeModal').style.display = 'none';
      currentEditingCell = null;
    }

    function toggleTimeInput() {
      const select = document.getElementById('workTypeSelect');
      const timeContainer = document.getElementById('timeInputContainer');
      
      if (select.value === '時短') {
        timeContainer.classList.remove('hidden');
      } else {
        timeContainer.classList.add('hidden');
      }
    }

    function saveWorkType() {
      if (!currentEditingCell) return;
      
      const select = document.getElementById('workTypeSelect');
      const startTime = document.getElementById('startTime').value;
      const endTime = document.getElementById('endTime').value;
      
      const row = currentEditingCell.parentElement;
      const timeCell = row.querySelector('td:nth-child(4)');
      const timeInputElement = timeCell.querySelector('input');
      
      currentEditingCell.textContent = select.value;
      
      if (select.value === '時短') {
        if (startTime && endTime) {
          timeInputElement.value = `${startTime}～${endTime}`;
        } else {
          timeInputElement.value = '';
        }
        timeInputElement.readOnly = false;
      } else {
        timeInputElement.value = '-';
        timeInputElement.readOnly = true;
      }
      
      closeWorkTypeModal();
    }

    function updateTotal(cell) {
      const row = cell.closest('tr');
      const cells = row.querySelectorAll('td[data-status]');
      let count = 0;
      cells.forEach(cell => {
        if (cell.dataset.status !== 'rest') count++;
      });
      
      const totalCell = row.querySelector('[data-total]');
      totalCell.textContent = count;
      
      if (count === 0) {
        totalCell.innerHTML = count + ' <span class="text-red-500 text-xs ml-1">⚠ 未出勤</span>';
      } else if (count < 3) {
        totalCell.innerHTML = count + ' <span class="text-yellow-500 text-xs ml-1">⚠ 少なめ</span>';
      }
    }

    function validateTimeInput(input) {
      const timePattern = /^([0-1]?[0-9]|2[0-3]):([0-5][0-9])～([0-1]?[0-9]|2[0-3]):([0-5][0-9])$/;
      const isValid = timePattern.test(input.value);
      
      if (isValid || input.value === '-' || input.value === '') {
        input.classList.remove('time-input-error');
      } else {
        input.classList.add('time-input-error');
      }
      
      input.parentElement.classList.add('edited');
      setTimeout(() => {
        input.parentElement.classList.remove('edited');
      }, 2000);
      
      return isValid;
    }

    function updateEmployeeNames() {
      const groupFilter = document.getElementById('filterGroup').value;
      const nameFilter = document.getElementById('filterName');
      const currentValue = nameFilter.value;
      
      const filteredEmployees = employees.filter(emp => {
        return groupFilter ? emp.group === groupFilter : true;
      });
      
      nameFilter.innerHTML = '<option value="">すべて</option>';
      
      const uniqueNames = [...new Set(filteredEmployees.map(emp => emp.name))];
      uniqueNames.forEach(name => {
        const option = document.createElement('option');
        option.value = name;
        option.textContent = name;
        if (name === currentValue) {
          option.selected = true;
        }
        nameFilter.appendChild(option);
      });
      
      if (currentValue && !uniqueNames.includes(currentValue)) {
        nameFilter.value = "";
      }
    }

    function toggleDayStatus(cell) {
      if (cell.dataset.status === 'rest') {
        cell.dataset.status = '';
        cell.textContent = '';
        cell.classList.remove('rest');
      } else {
        cell.dataset.status = 'rest';
        cell.textContent = '休';
        cell.classList.add('rest');
      }
      updateTotal(cell);
    }

    function applyFilter() {
      const [year, month] = document.getElementById('filterMonth').value.split('-').map(Number);
      const groupFilter = document.getElementById('filterGroup').value;
      const nameFilter = document.getElementById('filterName').value;
      
      const lastDay = new Date(year, month, 0).getDate();
      
      const holidays = [];
      for (let i = 1; i <= lastDay; i++) {
        const d = new Date(year, month - 1, i);
        if (d.getDay() === 3) holidays.push(i);
      }

      const weekDays = ['日', '月', '火', '水', '木', '金', '土'];
      const table = document.getElementById("shiftTable");
      const thead = table.querySelector("thead");
      const tbody = table.querySelector("tbody");

      // 清空表格内容
      thead.innerHTML = '';
      tbody.innerHTML = '';

      // 创建表头
      const theadRow = document.createElement("tr");
      theadRow.innerHTML = `
        <th class="border px-3 py-2 bg-gray-50">グループ</th>
        <th class="border px-3 py-2 bg-gray-50">名前</th>
        <th class="border px-3 py-2 bg-gray-50">働き方</th>
        <th class="border px-3 py-2 bg-gray-50">勤務時間</th>
      `;
      
      // 添加日期列
      for (let i = 1; i <= lastDay; i++) {
        const date = new Date(year, month - 1, i);
        const day = weekDays[date.getDay()];
        const isHoliday = holidays.includes(i);
        const th = document.createElement("th");
        th.className = `border px-3 py-2 ${isHoliday ? 'holiday' : ''}`;
        th.innerHTML = `${i}<br>${day}${isHoliday ? "<br><span title='休館日' class='text-red-500'>🔒</span>" : ""}`;
        theadRow.appendChild(th);
      }
      
      const totalTh = document.createElement("th");
      totalTh.textContent = "出勤合計";
      totalTh.className = "border px-3 py-2 bg-gray-50 font-bold text-sm text-gray-700";
      theadRow.appendChild(totalTh);
      thead.appendChild(theadRow);

      // 过滤员工数据
      const filteredEmployees = employees.filter(emp => {
        const matchGroup = groupFilter ? emp.group === groupFilter : true;
        const matchName = nameFilter ? emp.name === nameFilter : true;
        return matchGroup && matchName;
      });

      // 创建员工行
      // 过滤员工数据后，生成每一行
      // 清空 tbody 内容
      tbody.innerHTML = '';

      // 使用纯 DOM 方式创建每一行员工数据
      filteredEmployees.forEach(emp => {
        // 创建 tr 元素
        const tr = document.createElement("tr");

        // 1. 创建「グループ」单元格
        const groupTd = document.createElement("td");
        groupTd.className = "border px-3 py-2";
        groupTd.textContent = emp.group;
        tr.appendChild(groupTd);

        // 2. 创建「名前」单元格
        const nameTd = document.createElement("td");
        nameTd.className = "border px-3 py-2";
        nameTd.textContent = emp.name;
        tr.appendChild(nameTd);

        // 3. 创建「働き方」单元格，并绑定点击事件弹出 Modal
        const workTypeTd = document.createElement("td");
        workTypeTd.className = "border px-3 py-2 work-type-cell";
        workTypeTd.textContent = emp.type;
        workTypeTd.addEventListener("click", function () {
          openWorkTypeModal(workTypeTd);
        });
        tr.appendChild(workTypeTd);

        // 4. 创建「勤務時間」单元格与输入框
        const timeTd = document.createElement("td");
        timeTd.className = "border px-3 py-2";
        const timeInput = document.createElement("input");
        timeInput.type = "text";
        timeInput.className = "time-input text-center";
        timeInput.value = emp.hours;
        timeInput.placeholder = "例: 9:00～17:00";
        // 仅当类型为「時短」时允许输入，否则设为只读并置为 '-'
        if (emp.type === '時短') {
          timeInput.readOnly = false;
        } else {
          timeInput.readOnly = true;
          timeInput.value = '-';
        }
        // 绑定 change 事件进行验证及更新数据
        timeInput.addEventListener('change', function() {
          validateTimeInput(this);
          emp.hours = this.value;
        });
        timeTd.appendChild(timeInput);
        tr.appendChild(timeTd);

        // 5. 创建日期单元格（每日）—确保每个单元格都是独立的 td
        for (let i = 1; i <= lastDay; i++) {
          const dayTd = document.createElement("td");
          dayTd.className = `border px-2 py-2 day-cell ${holidays.includes(i) ? 'holiday' : ''}`;
          dayTd.dataset.day = i; // 设置 data-day 属性

          // 如果该天不在 emp.days 内，则视作休息日
          if (!emp.days.includes(i)) {
            dayTd.dataset.status = 'rest';
            dayTd.textContent = '休';
            dayTd.classList.add('rest');
          }
          // 点击切换状态
          dayTd.addEventListener("click", function() {
            toggleDayStatus(this);
          });
          tr.appendChild(dayTd);
        }

        // 6. 创建「出勤合計」单元格
        const totalTd = document.createElement("td");
        totalTd.className = "border px-3 py-2 font-bold text-sm text-gray-700 bg-gray-50";
        totalTd.setAttribute('data-total', '');
        
        // 计算工作日数量
        let workDays = 0;
        for (let i = 1; i <= lastDay; i++) {
          if (emp.days.includes(i)) {
            workDays++;
          }
        }
        totalTd.innerHTML = workDays;
        
        if (workDays === 0) {
          totalTd.innerHTML += ' <span class="text-red-500 text-xs ml-1">⚠ 未出勤</span>';
        } else if (workDays < 3) {
          totalTd.innerHTML += ' <span class="text-yellow-500 text-xs ml-1">⚠ 少なめ</span>';
        }
        
        tr.appendChild(totalTd);

        // 将完整行加入 tbody
        tbody.appendChild(tr);
      });

      
      // 如果没有匹配的员工，显示提示信息
      if (filteredEmployees.length === 0) {
        const emptyRow = document.createElement('tr');
        const emptyCell = document.createElement('td');
        emptyCell.colSpan = lastDay + 5;
        emptyCell.className = 'text-center py-8 text-gray-500';
        emptyCell.textContent = '該当する従業員はいません';
        emptyRow.appendChild(emptyCell);
        tbody.appendChild(emptyRow);
      }
    }

    const employees = [
      { group: 'A', name: '陸知花子', type: 'フルタイム', hours: '-', days: [1, 2, 3, 5, 7, 8, 9, 10] },
      { group: 'A', name: '大崎次郎', type: 'フルタイム', hours: '-', days: [1, 2, 3, 6, 7, 8, 9, 10] },
      { group: 'A', name: '品川太郎', type: '時短', hours: '10:00～14:00', days: [1, 2, 3, 4, 5, 6, 7, 8] },
      { group: 'B', name: '東京歌子', type: 'フルタイム', hours: '-', days: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] },
      { group: 'B', name: '川越一郎', type: '時短', hours: '09:30～13:30', days: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] },
      { group: 'MGR', name: '横浜夢', type: 'フルタイム', hours: '-', days: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] }
    ];

    updateEmployeeNames();
    applyFilter();
  </script>
</body>
</html>
